[{"id":"2c41a2bd.aa36ae","type":"tab","label":"Flow 1"},{"id":"f8b8a3a1.a7e7e","type":"inject","z":"2c41a2bd.aa36ae","name":"Trigger Every 10 Mins","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"600","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":250,"y":340,"wires":[["a1b2c3d4.e5f6a7"]]},{"id":"a1b2c3d4.e5f6a7","type":"function","z":"2c41a2bd.aa36ae","name":"Simulate Sensor Read (CO2 & Bat)","func":"// --- Simulate Sensor Readings ---\n// !!! IMPORTANT: Replace this with actual code to read your hardware sensors !!!\n\n// Example CO2 value (parts per million)\nmsg.payload = {}; // Create an empty payload object\nmsg.payload.co2 = Math.floor(Math.random() * 1800) + 400; // Random value between 400 and 2200 ppm\n\n// Example Battery Level (percentage)\nmsg.payload.battery = Math.floor(Math.random() * 101); // Random value between 0 and 100 %\n\n// You might also add a device ID\nmsg.deviceId = \"MyCO2Sensor_01\"; \n\n// Store raw values for later use in the flow\nmsg.co2_level = msg.payload.co2;\nmsg.battery_level = msg.payload.battery;\n\nnode.warn(\"Simulated Read: CO2=\" + msg.co2_level + \"ppm, Battery=\" + msg.battery_level + \"%\");\n\nreturn msg; // Pass the data to the next node","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":340,"wires":[["d4e5f6a7.b8c9d0","c7ae33cfdbc1494a"]]},{"id":"c3d4e5f6.a7b8c9","type":"mqtt out","z":"2c41a2bd.aa36ae","name":"Send to Gateway/Server","topic":"iot/co2device/data","qos":"1","retain":"false","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"YOUR_MQTT_BROKER_ID","x":1290,"y":140,"wires":[]},{"id":"d4e5f6a7.b8c9d0","type":"debug","z":"2c41a2bd.aa36ae","name":"Debug Sensor Data","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":750,"y":120,"wires":[]},{"id":"e5f6a7b8.c9d0e1","type":"function","z":"2c41a2bd.aa36ae","name":"Update Local Display (Battery)","func":"// Get the battery level we stored earlier\nvar battery = msg.battery_level;\n\n// --- Code to update your specific display ---\n// !!! IMPORTANT: Replace this simulation with code for your actual display hardware !!!\nnode.warn(\"DISPLAY UPDATE: Battery Level = \" + battery + \"%\");\n// Example: send command via I2C, SPI, GPIO etc.\n\nreturn msg; // Pass the message along for CO2 check","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":480,"wires":[["f6a7b8c9.d0e1f2"]]},{"id":"f6a7b8c9.d0e1f2","type":"switch","z":"2c41a2bd.aa36ae","name":"Check CO2 Level","property":"co2_level","propertyType":"msg","rules":[{"t":"lt","v":"800","vt":"num"},{"t":"btwn","v":"800","vt":"num","v2":"1500","v2t":"num"},{"t":"gt","v":"1500","vt":"num"}],"checkall":"false","repair":false,"outputs":3,"x":1030,"y":400,"wires":[["a7b8c9d0.e1f2a3"],["b8c9d0e1.f2a3b4","d0e1f2a3.b4c5d6"],["c9d0e1f2.a3b4c5","e1f2a3b4.c5d6e7"]]},{"id":"a7b8c9d0.e1f2a3","type":"function","z":"2c41a2bd.aa36ae","name":"Handle Normal CO2","func":"// --- Code to ensure display is steady and beeper is off ---\n// Optional: Add code here if you need to explicitly stop blinking/beeping\n\nnode.warn(\"ACTION: CO2 Level Normal (\" + msg.co2_level + \" ppm). Ensuring steady display/quiet.\");\n\n// No return msg needed if this is an endpoint.","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1300,"y":260,"wires":[[]]},{"id":"b8c9d0e1.f2a3b4","type":"function","z":"2c41a2bd.aa36ae","name":"Handle Medium CO2 (Blink)","func":"// --- Code to make your specific display blink ---\n// !!! IMPORTANT: Replace this simulation with code for your actual display hardware !!!\n\nnode.warn(\"ACTION: Blinking display! CO2 Level: \" + msg.co2_level + \" ppm\");\n// Add code here to control the display hardware's blinking function.\n// This might involve sending commands over I2C, SPI, GPIO etc.\n\n// Note: You might need logic elsewhere (e.g., in 'Handle Normal') \n// to explicitly STOP the blinking when the condition clears.\n\n// No return msg needed if this is an endpoint.","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1310,"y":420,"wires":[[]]},{"id":"c9d0e1f2.a3b4c5","type":"function","z":"2c41a2bd.aa36ae","name":"Handle High CO2 (Beep)","func":"// --- Code to activate your beeper/buzzer ---\n// !!! IMPORTANT: Replace this simulation with code for your actual hardware !!!\n\nnode.warn(\"ACTION: *** BEEPING *** ! CO2 Level: \" + msg.co2_level + \" ppm\");\n// Add code here to control the GPIO pin or device connected to the buzzer.\n// You might turn it on for a short duration or continuously.\n\n// Note: You might need logic elsewhere (e.g., in 'Handle Normal' or 'Handle Medium') \n// to explicitly STOP the beeping when the condition clears.\n\n// No return msg needed if this is an endpoint.","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1290,"y":520,"wires":[[]]},{"id":"d0e1f2a3.b4c5d6","type":"debug","z":"2c41a2bd.aa36ae","name":"Debug Medium CO2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1300,"y":380,"wires":[]},{"id":"e1f2a3b4.c5d6e7","type":"debug","z":"2c41a2bd.aa36ae","name":"Debug High CO2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1290,"y":480,"wires":[]},{"id":"c7ae33cfdbc1494a","type":"function","z":"2c41a2bd.aa36ae","name":"Format Data for Sending","func":"// Get the values from the previous step\nvar co2_level = msg.co2_level; // Use the stored raw value\nvar battery_level = msg.battery_level; // Use the stored raw value\nvar deviceId = msg.deviceId || \"UnknownDevice\"; // Use device ID if set\n\n// --- DEFINE THE STATIC NAME FOR THIS DEVICE HERE ---\nvar deviceName = \"Living Room Monitor\"; // <--- CHANGE THIS TO YOUR DESIRED NAME\n\n// Create a new payload object for sending (e.g., JSON)\nmsg.payload = {\n    \"deviceId\": deviceId,\n    \"name\": deviceName,                 // <--- ADDED THE NAME FIELD\n    \"timestamp\": new Date().toISOString(), // Add a timestamp\n    \"co2_ppm\": co2_level,\n    \"battery_percent\": battery_level\n};\n\n// msg.co2_level and msg.battery_level are still available for other branches\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":790,"y":260,"wires":[["c3d4e5f6.a7b8c9","e5f6a7b8.c9d0e1"]]},{"id":"YOUR_MQTT_BROKER_ID","type":"mqtt-broker","name":"MQTT Broker Config","broker":"localhost","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""}]